services:
  db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: openpolicy
      POSTGRES_USER: openpolicy
      POSTGRES_DB: openpolicy
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports: ["5432:5432"]
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U openpolicy -d openpolicy"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_trgm
      -c max_connections=100
      -c shared_buffers=256MB

  api-gateway:
    build: 
      context: ./services/api-gateway
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./services/api-gateway:/app
      - /app/__pycache__
    environment:
      - DATABASE_URL=postgresql+psycopg://openpolicy:openpolicy@db:5432/openpolicy
      - ENV=local
      - LOG_LEVEL=DEBUG
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  etl:
    build: 
      context: ./services/etl
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8086:8083"
    volumes:
      - ./services/etl:/app
      - ./data:/data
      - /app/__pycache__
    environment:
      - DATABASE_URL=postgresql+psycopg://openpolicy:openpolicy@db:5432/openpolicy
      - ENV=local
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - etl

  user-service:
    build: 
      context: ./services/user-service
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8082:8081"
    volumes:
      - ./services/user-service:/app
      - /app/__pycache__
    environment:
      - USER_DATABASE_URL=postgresql+psycopg://openpolicy:openpolicy@db:5432/openpolicy_users
      - REDIS_URL=redis://redis:6379/1
      - ENV=local
      - LOG_LEVEL=DEBUG
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  admin-ui:
    image: nginx:alpine
    ports:
      - "3000:80"
    volumes:
      - ./services/admin-ui/dist:/usr/share/nginx/html
      - ./services/admin-ui/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api-gateway
    profiles:
      - frontend

  web-ui:
    image: nginx:alpine
    ports:
      - "3001:80"
    volumes:
      - ./services/web-ui/static:/usr/share/nginx/html
      - ./services/web-ui/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api-gateway
    profiles:
      - frontend

  # OpenMetadata Service for Data Lineage Tracking
  openmetadata-server:
    image: openmetadata/server:1.9.1
    container_name: mergev2-openmetadata-server
    restart: always
    ports:
      - "8585:8585"
    environment:
      # Database configuration for PostgreSQL
      - DB_DRIVER_CLASS=org.postgresql.Driver
      - DB_SCHEME=postgresql
      - DB_PARAMS=allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
      - DB_USER=openpolicy
      - DB_USER_PASSWORD=openpolicy
      - DB_HOST=db
      - DB_PORT=5432
      - OM_DATABASE=openmetadata
      # ElasticSearch Configurations
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEME=http
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
      - SEARCH_TYPE=elasticsearch
      # OpenMetadata Configuration
      - OPENMETADATA_CLUSTER_NAME=openmetadata
      - SERVER_PORT=8585
      - LOG_LEVEL=INFO
      - AUTHORIZER_CLASS_NAME=org.openmetadata.service.security.DefaultAuthorizer
      - AUTHORIZER_REQUEST_FILTER=org.openmetadata.service.security.JwtFilter
      - AUTHORIZER_ADMIN_PRINCIPALS=[admin]
      - AUTHORIZER_ALLOWED_REGISTRATION_DOMAIN=["all"]
      - AUTHENTICATION_PROVIDER=basic
      - AUTHENTICATION_RESPONSE_TYPE=id_token
      - AUTHENTICATION_ENABLE_SELF_SIGNUP=true
      # Migration Configuration
      - MIGRATION_LIMIT_PARAM=1200
    volumes:
      - openmetadata_data:/var/log
      - openmetadata_data:/tmp
    depends_on:
      - db
      - elasticsearch
    profiles:
      - openmetadata
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8585/api/v1/system/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'


  openmetadata-ingestion:
    image: openmetadata/ingestion:1.9.1
    container_name: mergev2-openmetadata-ingestion
    restart: always
    ports:
      - "8085:8080"
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://openpolicy:openpolicy@db:5432/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key-here
      - AIRFLOW__WEBSERVER__RBAC=true
      - AIRFLOW__WEBSERVER__AUTHENTICATE=true
      - AIRFLOW__WEBSERVER__AUTH_BACKEND=airflow.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__AUTH_USER_REGISTRATION_ROLE=Admin
      - AIRFLOW__WEBSERVER__AUTH_USER_REGISTRATION=true
      - AIRFLOW__WEBSERVER__AUTH_USER_CREATION_ROLE=Admin
      - AIRFLOW__WEBSERVER__AUTH_USER_CREATION=true
      - AIRFLOW__WEBSERVER__AUTH_USER_CREATION_USERNAME=admin
      - AIRFLOW__WEBSERVER__AUTH_USER_CREATION_PASSWORD=admin
      - AIRFLOW__WEBSERVER__AUTH_USER_CREATION_EMAIL=admin@openpolicy.com
      - AIRFLOW__WEBSERVER__AUTH_USER_CREATION_FIRSTNAME=Admin
      - AIRFLOW__WEBSERVER__AUTH_USER_CREATION_LASTNAME=User
      # Additional Airflow settings for stability
      - AIRFLOW__CORE__FERNET_KEY=u8yPTF7NOEWUvTQtsypXEoLa3hFWjxoxPCAo/Rd3WSU=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true
      - AIRFLOW__SCHEDULER__HEARTBEAT_SEC=30
    volumes:
      - openmetadata_ingestion_dags:/opt/airflow/dags
      - openmetadata_ingestion_logs:/opt/airflow/logs
      - openmetadata_ingestion_plugins:/opt/airflow/plugins
    depends_on:
      - db
    profiles:
      - openmetadata
    command: ["airflow", "standalone"]
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # MCP Server removed - Cursor will run it directly

  # Monitoring Dashboard Service
  monitoring-dashboard:
    build:
      context: ./services/monitoring-dashboard
      dockerfile: Dockerfile
    container_name: mergev2-monitoring-dashboard
    restart: always
    ports:
      - "8087:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    depends_on:
      - api-gateway
      - user-service
    profiles:
      - monitoring

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    container_name: mergev2-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=changeme
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    profiles:
      - openmetadata
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'status.*green\\|status.*yellow'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  openmetadata_data:
    driver: local
  openmetadata_ingestion_dags:
    driver: local
  openmetadata_ingestion_logs:
    driver: local
  openmetadata_ingestion_plugins:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  default:
    name: openpolicy-network
