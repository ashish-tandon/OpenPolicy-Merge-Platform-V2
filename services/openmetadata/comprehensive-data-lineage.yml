# OpenPolicy Platform - Comprehensive Data Lineage Configuration
# This configuration maps every data point from source to consumption

version: "1.0"
platform: "OpenPolicy Platform"
description: "Complete data lineage tracking for parliamentary data platform"

# 1. DATA SOURCES & SCRAPERS
data_sources:
  - name: "Legacy Civic Scraper"
    type: "Web Scraper"
    location: "services/etl/legacy-civic-scraper"
    description: "Scrapes civic data from various Canadian municipalities"
    scrapers:
      - name: "CA_AB_Calgary"
        target: "https://calgary.ca"
        data_types: ["meetings", "bylaws", "decisions"]
      - name: "CA_AB_Edmonton"
        target: "https://edmonton.ca"
        data_types: ["council_meetings", "bylaws"]
      - name: "CA_BC_Vancouver"
        target: "https://vancouver.ca"
        data_types: ["council_meetings", "bylaws", "decisions"]
      - name: "CA_ON_Toronto"
        target: "https://toronto.ca"
        data_types: ["council_meetings", "bylaws", "decisions"]

  - name: "Legacy Scrapers CA"
    type: "Web Scraper"
    location: "services/etl/legacy-scrapers-ca"
    description: "Comprehensive Canadian municipal data scrapers"
    scrapers:
      - name: "CA_AB_Scrapers"
        targets: ["Calgary", "Edmonton", "Grande Prairie", "Lethbridge"]
        data_types: ["meetings", "bylaws", "decisions", "elections"]
      - name: "CA_BC_Scrapers"
        targets: ["Vancouver", "Victoria", "Surrey", "Burnaby"]
        data_types: ["council_meetings", "bylaws", "decisions"]
      - name: "CA_ON_Scrapers"
        targets: ["Toronto", "Ottawa", "Mississauga", "Hamilton"]
        data_types: ["council_meetings", "bylaws", "decisions", "elections"]

# 2. DATABASE SCHEMAS & TABLES
database_schemas:
  - name: "public"
    description: "Main application database schema"
    tables:
      - name: "bills_bill"
        description: "Parliamentary bills and legislation"
        columns:
          - name: "id"
            type: "integer"
            description: "Unique bill identifier"
            lineage: "Generated by API Gateway"
          - name: "title"
            type: "text"
            description: "Bill title"
            lineage: "Extracted from source data"
          - name: "name_en"
            type: "text"
            description: "Bill name in English"
            lineage: "Extracted from source data"
          - name: "session_id"
            type: "text"
            description: "Parliamentary session identifier"
            lineage: "Extracted from source data"
          - name: "number"
            type: "text"
            description: "Bill number"
            lineage: "Extracted from source data"
          - name: "privatemember"
            type: "boolean"
            description: "Private member's bill flag"
            lineage: "Extracted from source data"
          - name: "law"
            type: "boolean"
            description: "Law status flag"
            lineage: "Extracted from source data"
          - name: "introduced"
            type: "date"
            description: "Introduction date"
            lineage: "Extracted from source data"
          - name: "sponsor_politician_id"
            type: "integer"
            description: "Sponsoring politician ID"
            lineage: "Extracted from source data"

      - name: "core_politician"
        description: "Politician information"
        columns:
          - name: "id"
            type: "integer"
            description: "Unique politician identifier"
            lineage: "Generated by API Gateway"
          - name: "name"
            type: "text"
            description: "Politician name"
            lineage: "Extracted from source data"
          - name: "party_id"
            type: "integer"
            description: "Political party identifier"
            lineage: "Extracted from source data"

      - name: "core_party"
        description: "Political party information"
        columns:
          - name: "id"
            type: "integer"
            description: "Unique party identifier"
            lineage: "Generated by API Gateway"
          - name: "name"
            type: "text"
            description: "Party name"
            lineage: "Extracted from source data"

      - name: "core_session"
        description: "Parliamentary session information"
        columns:
          - name: "id"
            type: "integer"
            description: "Unique session identifier"
            lineage: "Generated by API Gateway"
          - name: "name"
            type: "text"
            description: "Session name"
            lineage: "Extracted from source data"

      - name: "core_electedmember"
        description: "Elected member information"
        columns:
          - name: "id"
            type: "integer"
            description: "Unique member identifier"
            lineage: "Generated by API Gateway"
          - name: "politician_id"
            type: "integer"
            description: "Reference to politician"
            lineage: "Extracted from source data"
          - name: "session_id"
            type: "integer"
            description: "Reference to session"
            lineage: "Extracted from source data"

# 3. API ENDPOINTS & DATA FLOW
api_endpoints:
  - name: "Bills API"
    path: "/api/v1/bills"
    method: "GET"
    description: "Retrieve parliamentary bills"
    data_flow:
      source: "public.bills_bill"
      transformation: "API Gateway mapping"
      output: "JSON response with mapped fields"
    response_mapping:
      "id": "bills_bill.id"
      "title": "bills_bill.title"
      "name_en": "bills_bill.name_en"
      "session": "bills_bill.session_id"
      "number": "bills_bill.number"
      "privatemember": "bills_bill.privatemember"
      "law": "bills_bill.law"
      "introduced": "bills_bill.introduced"
      "sponsor_politician_id": "bills_bill.sponsor_politician_id"

  - name: "Members API"
    path: "/api/v1/members"
    method: "GET"
    description: "Retrieve elected members"
    data_flow:
      source: "public.core_electedmember JOIN public.core_politician"
      transformation: "API Gateway mapping"
      output: "JSON response with member details"
    response_mapping:
      "id": "core_electedmember.id"
      "name": "core_politician.name"
      "party": "core_party.name"

  - name: "Sessions API"
    path: "/api/v1/sessions"
    method: "GET"
    description: "Retrieve parliamentary sessions"
    data_flow:
      source: "public.core_session"
      transformation: "API Gateway mapping"
      output: "JSON response with session details"

# 4. USER INTERFACE COMPONENTS
ui_components:
  - name: "Bills List Page"
    location: "services/web-ui/src/app/bills/page.tsx"
    description: "Main bills listing interface"
    data_sources:
      - api: "/api/v1/bills"
        component: "BillsList"
        data_mapping:
          "bill.id": "Displayed as bill identifier"
          "bill.title": "Displayed as bill title"
          "bill.session": "Displayed as session info"

  - name: "Bill Detail Page"
    location: "services/web-ui/src/app/bills/[session]/[number]/page.tsx"
    description: "Individual bill detail view"
    data_sources:
      - api: "/api/v1/bills/{id}"
        component: "BillDetail"
        data_mapping:
          "bill.name_en": "Displayed as bill name"
          "bill.session_id": "Displayed as session"
          "bill.privatemember": "Displayed as status"
          "bill.law": "Displayed as law status"

  - name: "Members List Page"
    location: "services/web-ui/src/app/members/page.tsx"
    description: "Elected members listing"
    data_sources:
      - api: "/api/v1/members"
        component: "MembersList"
        data_mapping:
          "member.name": "Displayed as member name"
          "member.party": "Displayed as party affiliation"

# 5. DATA TRANSFORMATION PIPELINES
data_pipelines:
  - name: "ETL Pipeline"
    description: "Data extraction, transformation, and loading"
    steps:
      - step: "Data Extraction"
        tools: ["Legacy Civic Scraper", "Legacy Scrapers CA"]
        output: "Raw HTML/JSON data"
      
      - step: "Data Transformation"
        tools: ["Data Mapping Library", "API Gateway"]
        output: "Structured data with consistent schema"
      
      - step: "Data Loading"
        tools: ["PostgreSQL Database"]
        output: "Stored data in public schema"

# 6. DATA QUALITY RULES
data_quality:
  - rule: "Required Fields"
    description: "Essential fields must not be null"
    fields: ["id", "title", "session_id"]
    validation: "NOT NULL constraint"
  
  - rule: "Data Consistency"
    description: "Foreign key relationships must be valid"
    relationships:
      - "bills_bill.sponsor_politician_id -> core_politician.id"
      - "core_electedmember.politician_id -> core_politician.id"
      - "core_electedmember.session_id -> core_session.id"
  
  - rule: "Data Format"
    description: "Data must conform to expected formats"
    validations:
      - "dates must be valid ISO format"
      - "boolean fields must be true/false"
      - "integer fields must be numeric"

# 7. MONITORING & METRICS
monitoring:
  - metric: "Data Freshness"
    description: "Time since last data update"
    threshold: "24 hours"
    alert: "Data older than 24 hours"
  
  - metric: "Data Completeness"
    description: "Percentage of required fields populated"
    threshold: "95%"
    alert: "Completeness below 95%"
  
  - metric: "API Response Time"
    description: "API endpoint response time"
    threshold: "500ms"
    alert: "Response time above 500ms"

# 8. INTEGRATION POINTS
integrations:
  - name: "MCP Server"
    type: "Model Context Protocol"
    purpose: "Cursor AI integration for data lineage queries"
    connection: "OpenMetadata API"
    capabilities:
      - "Query data lineage"
      - "Explore data relationships"
      - "Track data transformations"
  
  - name: "Admin Dashboard"
    type: "Web Interface"
    purpose: "Data management and monitoring"
    connection: "Admin UI service"
    features:
      - "Data lineage visualization"
      - "Data quality monitoring"
      - "Pipeline management"

# 9. DATA LINEAGE PATHS
lineage_paths:
  - path: "Source → Scraper → Database → API → UI"
    description: "Complete data flow from source to user interface"
    steps:
      - "Municipal websites"
      - "Legacy scrapers (CA_AB_Calgary, CA_BC_Vancouver, etc.)"
      - "Data transformation and mapping"
      - "PostgreSQL storage (public schema)"
      - "API Gateway endpoints (/api/v1/*)"
      - "Web UI components (BillsList, BillDetail, etc.)"
  
  - path: "Database Schema → API Response → UI Display"
    description: "Data mapping from database to user interface"
    steps:
      - "Database columns (bills_bill.title, bills_bill.name_en)"
      - "API response mapping (title, name_en, session)"
      - "UI component props and display logic"
      - "User interface rendering"

# 10. CONFIGURATION FILES
configuration_files:
  - name: "API Gateway Models"
    location: "services/api-gateway/app/models/openparliament.py"
    purpose: "Database model definitions and relationships"
  
  - name: "API Endpoints"
    location: "services/api-gateway/app/api/v1/bills.py"
    purpose: "API endpoint implementations and data mapping"
  
  - name: "Web UI Types"
    location: "services/web-ui/src/lib/api.ts"
    purpose: "TypeScript interfaces for API responses"
  
  - name: "Data Mapping Library"
    location: "services/etl/app/data_mapping_library.py"
    purpose: "Data transformation and mapping logic"
