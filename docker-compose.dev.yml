version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: merge_v2_postgres
    environment:
      POSTGRES_DB: merge_v2_dev
      POSTGRES_USER: merge_v2_user
      POSTGRES_PASSWORD: merge_v2_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - ./db/migrations:/migrations
    networks:
      - merge_v2_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U merge_v2_user -d merge_v2_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: merge_v2_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - merge_v2_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api_gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.dev
    container_name: merge_v2_api_gateway
    environment:
      - DATABASE_URL=postgresql://merge_v2_user:merge_v2_password@postgres:5432/merge_v2_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    ports:
      - "8000:8000"
    volumes:
      - ./services/api-gateway:/app
      - /app/venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - merge_v2_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # ETL Service
  etl_service:
    build:
      context: ./services/etl
      dockerfile: Dockerfile.dev
    container_name: merge_v2_etl
    environment:
      - DATABASE_URL=postgresql://merge_v2_user:merge_v2_password@postgres:5432/merge_v2_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      - ./services/etl:/app
      - /app/venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - merge_v2_network
    command: python -m uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload

  # User Service
  user_service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.dev
    container_name: merge_v2_user_service
    environment:
      - DATABASE_URL=postgresql://merge_v2_user:merge_v2_password@postgres:5432/merge_v2_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    ports:
      - "8002:8000"
    volumes:
      - ./services/user-service:/app
      - /app/venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - merge_v2_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Web Frontend
  web_frontend:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    container_name: merge_v2_web_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    networks:
      - merge_v2_network
    command: npm run dev

  # Admin Frontend
  admin_frontend:
    build:
      context: ./services/admin-ui
      dockerfile: Dockerfile.dev
    container_name: merge_v2_admin_frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_ENVIRONMENT=development
    ports:
      - "3001:3000"
    volumes:
      - ./services/admin-ui:/app
      - /app/node_modules
    networks:
      - merge_v2_network
    command: npm run dev

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: merge_v2_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - merge_v2_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: merge_v2_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - merge_v2_network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  merge_v2_network:
    driver: bridge
